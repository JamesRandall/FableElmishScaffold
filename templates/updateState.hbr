module {{{rootNamespace}}}.Update.State

open Elmish
open Types
open Browser

let init id =
  Model.Empty id , Cmd.OfFunc.result (Get{{{entityName}}} id)

let update context msg model =
  match msg with
  | Get{{{entityName}}} id ->
      { model with IsLoading = true }, Cmd.{{ofCmd settings}}.either Api.get{{{entityName}}} id Get{{{entityName}}}Result (Get{{{entityName}}}Res.Error >> Get{{{entityName}}}Result)
  | Get{{{entityName}}}Result result ->
      match result with
      | Get{{{entityName}}}Res.Success item ->
          { model with Item = item ; IsLoading = false }, Cmd.none
      | Get{{{entityName}}}Res.Error error ->
          console.error(error)
          // Handle your error - redirect to error page etc.
          { model with IsLoading = false }, Cmd.none
  
  | ChangeAProperty newValue ->
      { model with Item = { model.Item with AProperty = newValue } }, Cmd.none
  
  | Submit{{{entityName}}} ->
    { model with IsSaving = true }, Cmd.{{ofCmd settings}}.either Api.submit{{{entityName}}} id Submit{{{entityName}}}Result (Submit{{{entityName}}}Res.Error >> Submit{{{entityName}}}Result)
  | Submit{{{entityName}}}Result result ->
      match result with
      | Submit{{{entityName}}}Res.Success ->
          { model with IsSaving = false }, Cmd.none
      | Submit{{{entityName}}}Res.Error error ->
          console.error(error)
          // Handle your error - redirect to error page etc.
          { model with IsSaving = false }, Cmd.none
